The insert function took about 1.3 seconds while the append took only 3.9-4.3 ms.

Results for Append function(push method):
tiny: 8.4 μs
small: 8 μs
medium: 53 μs
large: 547.5 μs
extra large: 3.9739 ms

Results for Insert function(unshift method):
tiny: 10.7 μs
small: 13.8 μs
medium: 166.9 μs
large: 11.1647 ms
extra large: 1.296547 s

Initially there does not appear to be much difference between the runtimes of the
different methods. However, as the data increases, the unshift method gets incresingly
slower. By the time you get to the extra large array, the difference is so enourmous
that one is measured still in milliseconds while the unshift took almost a full second
to run. Even in the large array, the push method is still running in a handful of
microseconds while the unshift method has already entered the milliseconds to complete
range.

The unshift method is significantly slower because of the number of steps the computer
has to take on the backend just to make one new insertion into the array. For example,
in the medium array with 1000 numbers, in order to just input the last number into
the array, the computer has to perform 999 operations on each element of the array to
move it one space over just to open up the right spot to place the last number, and it's
having to do this for each loop through the array; making it less and less effective
as the array grows in size. I believe this is what is referred to as O(n^2) time complexity
whereas the push method is a simple O(n) time complexity.